server:
  port: 8089

spring:
  application:
    name: cart-service
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: 1
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-wait: -1ms
          max-idle: 5
          min-idle: 0

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
    consumer:
      group-id: cart-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: com.amar.cart.dto,com.amar.cart.event

  cloud:
    loadbalancer:
      cache:
        enabled: false
      ribbon:
        enabled: false

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL:http://localhost:8761/eureka/}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Service Integration
services:
  product:
    url: ${PRODUCT_SERVICE_URL:http://product-service}
  inventory:
    url: ${INVENTORY_SERVICE_URL:http://inventory-service}

# Application Configuration
app:
  services:
    inventory:
      timeout: ${INVENTORY_SERVICE_TIMEOUT:5000}

# Cart Kafka Configuration
cart:
  kafka:
    topics:
      cart-events: ${CART_KAFKA_TOPIC:cart-events}

# Observability
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0

# OpenTelemetry
otel:
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4318}
  service:
    name: cart-service
    version: 1.0.0

logging:
  level:
    com.amar.cart: DEBUG
    org.springframework.data.redis: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
